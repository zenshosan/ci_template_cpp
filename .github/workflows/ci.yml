# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Prepare msbuild
      if: contains(matrix.os, 'windows-latest')
      uses: microsoft/setup-msbuild@v2
      with:
        msbuild-architecture: x64

    - name: Install Python Dependencies
      run: pip install meson ninja

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "builddir=${{ github.workspace }}/builddir" >> "$GITHUB_OUTPUT"
        echo "builddir_pkg=${{ github.workspace }}/builddir_pkg" >> "$GITHUB_OUTPUT"

    - name: Prepare Build for Windows
      if: contains(matrix.os, 'windows-latest')
      run: meson setup --buildtype ${{ matrix.build_type }} --backend=vs ${{ steps.strings.outputs.builddir }} ${{ github.workspace }}

    - name: Prepare Build
      if: ${{ !contains(matrix.os, 'windows-latest') }}
      run: meson setup --buildtype ${{ matrix.build_type }} ${{ steps.strings.outputs.builddir }} ${{ github.workspace }}
      env:
        CC: ${{ matrix.c_compiler }}
        CXX: ${{ matrix.cpp_compiler }}

    - name: Run Build
      run: meson compile -v -C ${{ steps.strings.outputs.builddir }}

    - name: Run Test Suite
      run: meson test -v -C ${{ steps.strings.outputs.builddir }}

    - name: Install package
      run: meson install -C ${{ steps.strings.outputs.builddir }} --destdir ../install_dir

    - name: List files in the repository
      run: |
        ls ${{ github.workspace }}
        ls -R ${{ github.workspace }}/install_dir

    - name: Package Test for Windows
      if: contains(matrix.os, 'windows-latest')
      run: |
        meson setup --buildtype ${{ matrix.build_type }} --backend=vs '-Dpackage_install_dir=install_dir' ${{ steps.strings.outputs.builddir_pkg }} ${{ github.workspace }}/package_test
        meson compile -v -C ${{ steps.strings.outputs.builddir_pkg }}
        meson test -v -C ${{ steps.strings.outputs.builddir_pkg }}

    - name: Package Test
      if: ${{ !contains(matrix.os, 'windows-latest') }}
      run: |
        meson setup --buildtype ${{ matrix.build_type }} '-Dpackage_install_dir=install_dir' ${{ steps.strings.outputs.builddir_pkg }} ${{ github.workspace }}/package_test
        meson compile -v -C ${{ steps.strings.outputs.builddir_pkg }}
        meson test -v -C ${{ steps.strings.outputs.builddir_pkg }}
      env:
        CC: ${{ matrix.c_compiler }}
        CXX: ${{ matrix.cpp_compiler }}
        PKG_CONFIG_PATH: ${{ github.workspace }}/install_dir


